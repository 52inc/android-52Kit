/* * Copyright (c) 2019 52inc. * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * */package com.ftinc.kit.widgetimport android.content.Contextimport android.content.res.ColorStateListimport android.graphics.Typefaceimport android.graphics.drawable.Drawableimport android.util.AttributeSetimport android.util.TypedValueimport android.view.Gravityimport android.view.Viewimport android.view.ViewGroup.LayoutParams.WRAP_CONTENTimport android.widget.FrameLayoutimport android.widget.LinearLayoutimport android.widget.ProgressBarimport androidx.annotation.*import androidx.appcompat.widget.AppCompatImageViewimport androidx.appcompat.widget.AppCompatTextViewimport androidx.core.content.ContextCompatimport androidx.core.view.*import androidx.core.widget.ImageViewCompatimport com.ftinc.kit.Rimport com.ftinc.kit.extensions.*import com.google.android.material.internal.ForegroundLinearLayoutclass EmptyView @JvmOverloads constructor(        context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0) : FrameLayout(context, attrs, defStyleAttr) {    enum class State {        EMPTY,        LOADING    }    private lateinit var iconView: AppCompatImageView    private lateinit var messageView: AppCompatTextView    private lateinit var actionView: AppCompatTextView    private lateinit var progressView: ProgressBar    private var actionClickListener: (View) -> Unit = {}    var state = State.EMPTY        set(value) {            if (field == value) return            field = value            when(value) {                State.LOADING -> {                    iconView.isGone = true                    messageView.isGone = true                    actionView.isGone = true                    progressView.isVisible = true                }                State.EMPTY -> {                    progressView.isGone = true                    messageView.isVisible = !messageView.text.isNullOrBlank()                    iconView.isVisible = iconView.drawable != null                    actionView.isVisible = !actionView.text.isNullOrBlank()                }            }        }    var icon: Drawable?        get() = iconView.drawable        set(value) {            iconView.setImageDrawable(value)            iconView.isVisible = true        }    @get:Px    @setparam:Px    var iconSize: Int        get() = iconView.layoutParams.width        set(value) {            val size = if (value == -1) WRAP_CONTENT else value            iconView.updateLayoutParams {                width = size                height = size            }        }    @get:ColorInt    @setparam:ColorInt    var iconColor: Int?        get() = ImageViewCompat.getImageTintList(iconView)?.defaultColor        set(value) {            if (value != null) {                ImageViewCompat.setImageTintList(iconView, ColorStateList.valueOf(value))            } else {                ImageViewCompat.setImageTintList(iconView, null)            }        }    var message: CharSequence?        get() = messageView.text        set(message) {            messageView.text = message        }    @get:ColorInt    @setparam:ColorInt    var messageColor: Int        get() = messageView.currentTextColor        set(value) {            messageView.setTextColor(value)        }    init {        setupViews()        parseAttributes(attrs, defStyleAttr)        setPadding(dip(32))    }    /**     * Set the action for this [EmptyView]     * @param textResId the resource id of the text to set the action of     * @param listener the action click listener     */    fun setAction(@StringRes textResId: Int, listener: (View) -> Unit) {        actionView.setText(textResId)        actionClickListener = listener        actionView.isVisible = true    }    /**     * Set the action for this [EmptyView]     * @param text the action text, or null to disable     * @param listener the action click listener     */    fun setAction(text: String?, listener: (View) -> Unit = {}) {        actionView.text = text        actionClickListener = listener        actionView.isVisible = text != null    }    /**     * Set the icon with a drawable resource id     * @param resourceId the drawable resource id     */    fun setIconResource(@DrawableRes resourceId: Int) {        iconView.setImageResource(resourceId)        iconView.isVisible = true    }    /**     * Set the color of the icon     * @param resId the color resource identifier for the icon     */    fun setIconColorRes(@ColorRes resId: Int) {        iconColor = color(resId)    }    /**     * Set the message of the empty view     * @param resId the message text resource identifier     */    fun setMessage(@StringRes resId: Int) {        messageView.setText(resId)    }    /**     * Set the text color of the message textview     *     * @param resId     the resource id of the color you want to set the text to     */    fun setEmptyMessageColorResource(@ColorRes resId: Int) {        messageColor = color(resId)    }    /**     * Set the typeface of the message text     * @param typeface the message text typeface     */    fun setMessageTypeface(typeface: Typeface) {        messageView.typeface = typeface    }    fun setMessageTextSize(unit: Int, size: Float) {        messageView.setTextSize(unit, size)    }    fun setIconPadding(            left: Int = iconView.paddingLeft,            top: Int = iconView.paddingTop,            right: Int = iconView.paddingRight,            bottom: Int = iconView.paddingBottom    ) {        iconView.setPadding(left, top, right, bottom)    }    fun setIconPadding(size: Int) {        iconView.setPadding(size)    }    /**     * Initialize the Empty Layout     */    private fun setupViews() {        // Create the Empty Layout        val container = LinearLayout(context)        container.gravity = Gravity.CENTER        container.orientation = LinearLayout.VERTICAL        iconView = AppCompatImageView(context).apply {            updatePadding(bottom = dip(16))            container.addView(this, LinearLayout.LayoutParams(WRAP_CONTENT, WRAP_CONTENT))        }        messageView = AppCompatTextView(context).apply {            setTextSize(TypedValue.COMPLEX_UNIT_SP, 16f)            setTextColor(color(R.color.black26))            gravity = Gravity.CENTER            container.addView(this, LayoutParams(WRAP_CONTENT, WRAP_CONTENT))        }        actionView = AppCompatTextView(context).apply {            setPadding(dip(8))            background = getSelectableItemBackground()            isAllCaps = true            isGone = true            textSize = sp(14)            setTextColor(getColorControlNormal())            setOnClickListener { actionClickListener(it) }            container.addView(this, LinearLayout.LayoutParams(WRAP_CONTENT, WRAP_CONTENT).apply {                topMargin = dip(16)            })        }        progressView = ProgressBar(context).apply {            isGone = true            container.addView(this, LinearLayout.LayoutParams(WRAP_CONTENT, WRAP_CONTENT))        }        addView(container, LayoutParams(WRAP_CONTENT, WRAP_CONTENT).apply {            gravity = Gravity.CENTER        })    }    /**     * Parse XML attributes     *     * @param attrs     the attributes to parse     */    private fun parseAttributes(attrs: AttributeSet?, defStyle: Int) {        val defaultColor = color(R.color.black26)        val a = context.obtainStyledAttributes(attrs, R.styleable.EmptyView, defStyle, 0)        if (a != null) {            a.getResourceId(R.styleable.EmptyView_emptyIcon, -1)                    .takeIf { it != -1 }                    ?.let { setIconResource(it) }            a.getDimensionPixelSize(R.styleable.EmptyView_emptyIconSize, -1)                    .takeIf { it != -1 }                    ?.let { iconSize = it }            iconColor = a.getColor(R.styleable.EmptyView_emptyIconColor, defaultColor)            iconView.setPadding(a.getDimensionPixelSize(R.styleable.EmptyView_emptyIconPadding,                    dip(16)))            message = a.getString(R.styleable.EmptyView_emptyMessage)            messageColor = a.getColor(R.styleable.EmptyView_emptyMessageColor, defaultColor)            messageView.setTextSize(TypedValue.COMPLEX_UNIT_PX, a.getDimensionPixelSize(R.styleable.EmptyView_emptyMessageTextSize,                    sip(defaultMessageTextSizeSp)).toFloat())            actionView.setTextColor(a.getColor(R.styleable.EmptyView_emptyActionColor,                    getColorControlNormal()))            actionView.textSize = a.getDimension(R.styleable.EmptyView_emptyActionTextSize, dp(14))            actionView.text = a.getString(R.styleable.EmptyView_emptyActionText)            state = State.values()[a.getInt(R.styleable.EmptyView_emptyState, State.EMPTY.ordinal)]            a.recycle()        }    }    /**     * Get the selectableItemBackground attribute drawable     * @return the selectable item drawable     */    private fun getSelectableItemBackground(): Drawable? {        val ta = context.obtainStyledAttributes(intArrayOf(R.attr.selectableItemBackground))        val drawableFromTheme = ta.getDrawable(0)        ta.recycle()        return drawableFromTheme    }    /**     * Get the attribute for color control     * @return the colorInt     */    @ColorInt    private fun getColorControlNormal(): Int {        val typedValue = TypedValue()        context.theme.resolveAttribute(R.attr.colorControlNormal, typedValue, true);        return ContextCompat.getColor(context, typedValue.resourceId)    }    companion object {        var defaultMessageTextSizeSp = 16    }}